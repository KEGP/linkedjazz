PREFIX sc: <http://purl.org/science/owl/sciencecommons/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>
PREFIX schema: <http://schema.org/>

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <https://www.unibo.it/ontologies/metadata/>
PREFIX timeinterval: <http://www.ontologydesignpatterns.org/cp/owl/timeinterval.owl#>
PREFIX timeindexedsituation: <http://www.ontologydesignpatterns.org/cp/owl/timeindexedsituation.owl#>

CONSTRUCT {
  [a :RelationBetweenArtists;
      :involvesSourceArtist ?sourceArtistMyNS;
      :involvesTargetArtist ?targetArtistMyNS;]

    :atTime [
      a :TimeInterval;
      :hasIntervalStartDate ?startDate;
      :hasIntervalStartDate ?intervalDate;
      :hasIntervalEndDate ?endDate
    ];
    :satisfies ?aaRelationMyNS.

  	?sourceArtistMyNS a :Artist.
    #:hasMusicbrainzID ?sourceID.

    ?targetArtistMyNS a :Artist.
    #:hasMusicbrainzID ?targetID.

    ?aaRelationMyNS a :RelationBetweenArtistsType;
    owl:sameAs ?musicbrainzRelationURL;
    #:hasMusicBrainzID ?relationTypeID;
    schema:name ?relationType.

}WHERE {
  SERVICE<x-sparql-anything:>{
    fx:properties fx:location "file:///sparql.anything/data/musicbrainz/artist/artist_0e9806c6-1342-432b-87b7-11e5e2217311_1.json" ;
                  fx:trim-strings "true"^^xsd:boolean .

    ?root a fx:root;
          xyz:artist ?artist_BN.

      {?artist_BN xyz:id ?sourceID.
      ?artist_BN xyz:artist-relation-list/fx:anySlot ?target.
      	?target xyz:target ?targetID.
        ?target xyz:direction "forward".}
      UNION
      {?artist_BN xyz:id ?targetID.
      ?artist_BN xyz:artist-relation-list/fx:anySlot ?target.
        ?target xyz:direction "backward".}

      OPTIONAL{?target xyz:type ?relationType.}
      OPTIONAL{?target xyz:type-id ?relationTypeID.
      	OPTIONAL{?target xyz:begin ?startDate.}
      	OPTIONAL{?target xyz:end ?endDate.}
    }

    BIND(fx:entity(:, "resource/Artist/", ?sourceID) as ?sourceArtistMyNS).
    BIND(fx:entity(:, "resource/Artist/", ?targetID) as ?targetArtistMyNS).
    BIND(fx:entity("https://musicbrainz.org/relationship/", ?relationTypeID) as ?musicbrainzRelationURL).

    #BIND(fx:entity(:, "resource/ArtistArtistrelation/", ?sourceID, "to", ?targetID) as ?aaRelationMyNS).
    BIND(fx:entity(:, "resource/RelationBetweenArtistsType/", REPLACE(?relationType, " ","_")) as ?aaRelationMyNS).
    #could use evocative relationType or more secure relationTypeID
  }
}
