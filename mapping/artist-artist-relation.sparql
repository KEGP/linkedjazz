PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <http://localhost:8080/ontology/kejazz/>
PREFIX res: <http://localhost:8080/resource/kejazz/>

CONSTRUCT {
  [a :RelationBetweenArtists;
      :involvesSourceArtist ?sourceArtistMyNS;
      :involvesTargetArtist ?targetArtistMyNS;]

    :atTime [
      a dul:TimeInterval;
      dul:hasIntervalStartDate ?startDate;
      dul:hasIntervalEndDate ?endDate
    ];
    :satisfies ?aaRelationMyNS.

  	?sourceArtistMyNS a :Artist.
    #:hasMusicbrainzID ?sourceID. #already populated bt artist.sql

    ?targetArtistMyNS a :Artist;
      :hasMusicbrainzID ?targetID.
  ### populate here in case target artist is missing from artist files

    ?aaRelationMyNS a :RelationBetweenArtistsType;
    owl:sameAs ?musicbrainzRelationURL;
    rdfs:label ?relationType;
    :hasMusicBrainzID ?relationTypeID.

}WHERE {
  SERVICE<x-sparql-anything:>{
    # launch on musicbrainz/artist/
    fx:properties fx:location ?_name ;
                  fx:trim-strings "true"^^xsd:boolean .

    ?root a fx:root;
          xyz:artist ?artist_BN.

      {?artist_BN xyz:id ?sourceID.
      ?artist_BN xyz:artist-relation-list/fx:anySlot ?target.
      	?target xyz:target ?targetID.
        ?target xyz:direction "forward".}
      UNION
      {?artist_BN xyz:id ?targetID.
      ?artist_BN xyz:artist-relation-list/fx:anySlot ?target.
        ?target xyz:direction "backward".}

      OPTIONAL{?target xyz:type ?relationType.}
      OPTIONAL{?target xyz:type-id ?relationTypeID.
      	OPTIONAL{?target xyz:begin ?startDate.}
      	OPTIONAL{?target xyz:end ?endDate.}
    }

    BIND(fx:entity(res:Artist, "/", ?sourceID) as ?sourceArtistMyNS).
    BIND(fx:entity(res:Artist, "/", ?targetID) as ?targetArtistMyNS).
    BIND(fx:entity("https://musicbrainz.org/relationship/", ?relationTypeID) as ?musicbrainzRelationURL).

    #BIND(fx:entity(res:ArtistArtistrelation, "/", ?sourceID, "to", ?targetID) as ?aaRelationMyNS).
    #BIND(fx:entity(res:RelationBetweenArtistsType, "/", REPLACE(?relationType, " ","_")) as ?aaRelationMyNS).
    BIND(fx:entity(res:RelationBetweenArtistsType, "/", ?relationTypeID) as ?aaRelationMyNS).
  }
}
