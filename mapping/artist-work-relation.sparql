PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <http://localhost:8080/ontology/kejazz/>
PREFIX res: <http://localhost:8080/resource/kejazz/>
PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>

CONSTRUCT {
  # ?workMyNS is already populated by work.sparql (on the same files)
  [ a :ArtistContributionToWork;
    :forWork ?workMyNS;
    :atTime [
      a dul:TimeInterval;
      :hasIntervalStartDate ?artistWorkStartDate;
      :hasIntervalEndDate ?artistWorkEndDate
    ];
    :includesArtist ?artistMyNS;
    :involvesRole ?artistRoleMyNS
  ].

  # RELATED ENTITIES

  # It may happen that the contributing artist isn't generated
  # by the artist.sparql query! That's why we need to create
  # again its triples here, using the limited amount of
  # information given inside the RecordingArtist relation data-structure
  # exposed by the MusicBrainz API.
  ?artistMyNS a ?artistClass;
    :hasName ?artistName;
    rdfs:label ?artistName;
    owl:sameAs ?mbArtistURL;
    :hasMusicBrainzID ?artistMbID.

  ?artistRoleMyNS a :RoleInWork;
    owl:sameAs ?mbRoleURL;
    :hasMusicBrainzID ?artistRoleMbID;
    :hasName ?roleName;
    rdfs:label ?roleName.

} WHERE {
  SERVICE<x-sparql-anything:>{
    # launch on musicbrainz/work/
    fx:properties fx:location ?_name ;
                  fx:trim-strings "true"^^xsd:boolean .
    ?root a fx:root;
          xyz:work ?work_BN.

    ?work_BN xyz:id ?mbID;
             xyz:artist-relation-list/fx:anySlot ?artist_role_BN.

    ?artist_role_BN xyz:type-id ?artistRoleMbID;
                    xyz:artist ?artist_BN.
    
    ?artist_BN xyz:id ?artistMbID.
    OPTIONAL {?artist_BN xyz:name ?artistName.}
    
    {?artist_BN xyz:type "Person". BIND(:ArtistPerson as ?artistClass).}
    UNION
    {?artist_BN xyz:type "Group". BIND(:Band as ?artistClass).}
    UNION
    {?artist_BN xyz:type "Choir". BIND(:Choir as ?artistClass).}
    UNION
    {?artist_BN xyz:type "Orchestra". BIND(:Orchestra as ?artistClass).}
    UNION
    {?artist_BN xyz:type ?mbArtistType. FILTER(?mbArtistType NOT IN ("Person", "Group", "Choir", "Orchestra")). BIND(:ArtistGroup as ?artistClass).}

    OPTIONAL {?artist_role_BN xyz:artist/xyz:name ?artistName.}
    OPTIONAL {?artist_role_BN xyz:type ?roleName.}
    OPTIONAL {?artist_role_BN xyz:begin ?artistWorkStartDate.}
    OPTIONAL {?artist_role_BN xyz:end ?artistWorkEndDate.}

    BIND(fx:entity(res:Work, "/", ?mbID) as ?workMyNS).
    BIND(fx:entity(res:Artist, "/", ?artistMbID) as ?artistMyNS).
    BIND(fx:entity(res:RoleInWork, "/", ?artistRoleMbID) as ?artistRoleMyNS).

    BIND(fx:entity("https://musicbrainz.org/relationship/", ?artistRoleMbID) as ?mbRoleURL).
    BIND(fx:entity("https://musicbrainz.org/artist/", ?artistMbID) as ?mbArtistURL).
    BIND(fx:entity("https://musicbrainz.org/work/", ?mbID) as ?mbWorkURL).
  }
}
