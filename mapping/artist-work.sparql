PREFIX xt: <http://purl.org/twc/vocab/cross-topix#>
PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <localhost:8080/ontology/kejazz/>
#PREFIX timeinterval: <http://www.ontologydesignpatterns.org/cp/owl/timeinterval.owl#>
#PREFIX timeindexedsituation: <http://www.ontologydesignpatterns.org/cp/owl/timeindexedsituation.owl#>
PREFIX objectrole: <http://www.ontologydesignpatterns.org/cp/owl/objectrole.owl#>

CONSTRUCT {
  #work is already populated by work.sparql (on the same files)
  [ a :ArtistContributionToWork;
    :forWork ?work;
    :atTime [
      a dul:TimeInterval;
      dul:hasIntervalStartDate ?artistWorkStartDate;
      dul:hasIntervalEndDate ?artistWorkEndDate
    ];
    :includesArtist ?artist;
    :involvesRole ?artistRole
  ].

  ?artist :hasRoleInWork ?artistRole;
    :hasName ?artistName;
    rdfs:label ?artistName;
    :hasMusicBrainzID ?artistMbID;
  	owl:sameAs ?mbArtistURL.

  ?artistRole owl:sameAs ?mbRoleURL;
    :hasMusicBrainzID ?artistRoleMbID;
    :hasName ?roleName;
    rdfs:label ?roleName.

}WHERE {
  SERVICE<x-sparql-anything:>{
    fx:properties fx:location "file:///sparql.anything/data/musicbrainz/work/work_8933f057-99f8-4aa9-9f2d-3872ac54a37e.json" ;
                  fx:trim-strings "true"^^xsd:boolean .
    ?root a fx:root;
          xyz:work ?work_BN.

    ?work_BN xyz:id ?mbID ;
             xyz:artist-relation-list/fx:anySlot ?artist_role_BN.

    ?artist_role_BN xyz:type-id ?artistRoleMbID;
                    xyz:artist/xyz:id ?artistMbID;
                    xyz:artist/xyz:name ?artistName.

    OPTIONAL {?artist_role_BN xyz:type ?roleName.}
    OPTIONAL {?artist_role_BN xyz:begin ?artistWorkStartDate.}
    OPTIONAL {?artist_role_BN xyz:end ?artistWorkEndDate.}

    BIND(fx:entity(:, "resource/Work/", ?mbID) as ?work).
    BIND(fx:entity(:, "resource/Artist/", ?artistMbID) as ?artist).
    BIND(fx:entity(:, "resource/ArtistRole/", ?artistRoleMbID) as ?artistRole).
    BIND(fx:entity("https://musicbrainz.org/relationship/", ?artistRoleMbID) as ?mbRoleURL).
    BIND(fx:entity("https://musicbrainz.org/artist/", ?artistMbID) as ?mbArtistURL).
    BIND(fx:entity("https://musicbrainz.org/work/", ?mbID) as ?mbWorkURL).
  }
}
