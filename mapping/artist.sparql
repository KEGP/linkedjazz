PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <http://localhost:8080/ontology/kejazz/>
PREFIX res: <http://localhost:8080/resource/kejazz/>
PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>

CONSTRUCT {
  ?artistMyNS a ?artistClass;
    rdfs:label ?name;
    :hasName ?name;
    :hasAlias ?alias;

    # IDENTIFICATION
    :hasMusicBrainzID ?mbID;
    :hasIPI ?ipi;
    :hasISNI ?isni;
    owl:sameAs ?mbIDurl; # build url from string
    owl:sameAs ?isniURL; # build url from string
    owl:sameAs ?url;

    :hasMainArea ?mainareaMyNS;
    :hasBeginArea ?beginareaMyNS;
    :hasEndArea ?endareaMyNS;

    # PERSON ONLY
    :hasGender ?gender;
    # Using a BN generated by SPARQL.Anything as a hack to avoid producing
    # duplicates of the same TimeInterval for each match caused by the WHERE clause:
    :hasLifeSpan ?lifespan_BN;

    # GROUP/CHOIR/ORCHESTRA ONLY
    # Using a BN generated by SPARQL.Anything as a hack to avoid producing
    # duplicates of the same TimeInterval for each match caused by the WHERE clause:
    :hasActivityPeriod ?activityPeriod_BN.

    # RELATED ENTITIES
    ?activityPeriod_BN a dul:TimeInterval;
      :hasIntervalStartDate ?startDate;
      :hasIntervalEndDate ?endDate.

    ?lifespan_BN a dul:TimeInterval;
      :hasIntervalStartDate ?startDate;
      :hasIntervalEndDate ?endDate.

    ?mainareaMyNS a :ArtistActivityArea;
      rdfs:label ?maName;
      :hasName ?maName;
      :hasMusicBrainzID ?mainAreaID;
      owl:sameAs ?mainAreaURL.

    ?beginareaMyNS a :ArtistActivityArea;
      rdfs:label ?baName;
      :hasName ?baName;
      :hasMusicBrainzID ?beginAreaID;
      owl:sameAs ?beginAreaURL.

    ?endareaMyNS a :ArtistActivityArea;
      rdfs:label ?eaName;
      :hasName ?eaName;
      :hasMusicBrainzID ?endAreaID;
      owl:sameAs ?endAreaURL.

#artist_02ffe965-bd93-45bd-ae9f-5671261871ae_1.json # Example of ArtistPerson
#artist_3d672385-79a6-4aa6-94b8-af59a0447db1_1.json # Example of ArtistGroup

} WHERE {
  SERVICE<x-sparql-anything:>{
    # launch on musicbrainz/artist
    fx:properties fx:location ?_name ;
                  fx:trim-strings "true"^^xsd:boolean .

    ?root a fx:root;
          xyz:artist ?artist_BN.
    ?artist_BN xyz:id ?mbID.

    OPTIONAL {?artist_BN xyz:name ?name.}

    {
      ?artist_BN xyz:type "Person".
      BIND(:ArtistPerson as ?artistClass).

      OPTIONAL {?artist_BN xyz:gender ?gender.}
      OPTIONAL {
        ?artist_BN xyz:life-span ?lifespan_BN.
        OPTIONAL {?lifespan_BN xyz:begin ?startDate.}
        OPTIONAL {?lifespan_BN xyz:end ?endDate.}
      }
    }
    UNION
    {
      {?artist_BN xyz:type "Group". BIND(:Band as ?artistClass).}
      UNION
      {?artist_BN xyz:type "Choir". BIND(:Choir as ?artistClass).}
      UNION
      {?artist_BN xyz:type "Orchestra". BIND(:Orchestra as ?artistClass).}
      UNION
      {?artist_BN xyz:type ?mbArtistType. FILTER(?mbArtistType NOT IN ("Person", "Group", "Choir", "Orchestra")). BIND(:ArtistGroup as ?artistClass).}

      OPTIONAL {
        ?artist_BN xyz:life-span ?activityPeriod_BN.
        OPTIONAL {?activityPeriod_BN xyz:begin ?startDate.}
        OPTIONAL {?activityPeriod_BN xyz:end ?endDate.}
      }
    }

    OPTIONAL {
      {?artist_BN xyz:isni ?isni.}
      UNION
      {?artist_BN xyz:isni-list/fx:anySlot ?isni.}
    }

    OPTIONAL {
      {?artist_BN xyz:ipi ?ipi.}
      UNION
      {?artist_BN xyz:ipi-list/fx:anySlot ?ipi.}
    }

    OPTIONAL {
      ?artist_BN xyz:area ?mainArea_BN.
      OPTIONAL {?mainArea_BN xyz:id ?mainAreaID.}
      OPTIONAL {?mainArea_BN xyz:name ?maName.}
    }

    OPTIONAL {
      ?artist_BN xyz:begin-area ?beginArea_BN.
      OPTIONAL {?beginArea_BN xyz:id ?beginAreaID.}
      OPTIONAL {?beginArea_BN xyz:name ?baName.}
    }

    OPTIONAL {
      ?artist_BN xyz:end-area ?endArea_BN.
      OPTIONAL {?endArea_BN xyz:id ?endAreaID.}
      OPTIONAL {?endArea_BN xyz:name ?eaName.}
    }

    OPTIONAL {
      ?artist_BN xyz:url-relation-list/fx:anySlot/xyz:target ?urlstr.
      BIND(fx:entity(?urlstr) as ?url).
    }

    OPTIONAL {?artist_BN xyz:alias-list/fx:anySlot/xyz:alias ?alias.}

    BIND(fx:entity(res:Artist, "/", ?mbID) as ?artistMyNS).
    BIND(fx:entity(res:ArtistActivityArea, "/", ?mainAreaID) as ?mainareaMyNS).
    BIND(fx:entity(res:ArtistActivityArea, "/", ?beginAreaID) as ?beginareaMyNS).
   	BIND(fx:entity(res:ArtistActivityArea, "/", ?endAreaID) as ?endareaMyNS).

    BIND(fx:entity("https://musicbrainz.org/artist/", ?mbID) as ?mbIDurl).
    BIND(fx:entity("https://isni.org/isni/", ?isni) as ?isniURL).
    BIND(fx:entity("https://musicbrainz.org/area/", ?mainAreaID) as ?mainAreaURL).
    BIND(fx:entity("https://musicbrainz.org/area/", ?beginAreaID) as ?beginAreaURL).
    BIND(fx:entity("https://musicbrainz.org/area/", ?endAreaID) as ?endAreaURL).
  }
}
