PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX : <http://localhost:8080/ontology/kejazz/>
PREFIX res: <http://localhost:8080/resource/kejazz/>
PREFIX dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>

CONSTRUCT {
  ?releaseMyNS a :Release;
    :hasTitle ?title;
    rdfs:label ?title;
    :hasMusicBrainzID ?mbID;
    :hasOfficialityStatus ?status;
    :releasedInDate ?releaseDate;
    :hasASIN ?asin;
    :hasBarcode ?barcode;
    :isCreditedTo ?creditedArtistMyNS;
    owl:sameAs ?mbURL;
    owl:sameAs ?url;
    owl:sameAs ?asinURL.

  # RELATED ENTITIES

  # It may happen that the credited artist isn't generated
  # by the artist.sparql query! That's why we need to create
  # again its triples here, using the limited amount of
  # information given inside the artist-credit data-structure
  # exposed by the MusicBrainz API.
  ?creditedArtistMyNS a ?artistClass;
    :hasName ?artistName;
    rdfs:label ?artistName;
    owl:sameAs ?mbArtistURL;
    :hasMusicBrainzID ?creditedArtistMbID.

} WHERE {
  SERVICE<x-sparql-anything:>{
    # launch on musicbrainz/release
    fx:properties fx:location ?_name ;
                  fx:trim-strings "true"^^xsd:boolean .

    ?root a fx:root;
          xyz:release ?release_BN.
    ?release_BN xyz:id ?mbID.

    OPTIONAL {?release_BN xyz:title ?title.}
    OPTIONAL {?release_BN xyz:status ?status.}
    OPTIONAL {?release_BN xyz:date ?releaseDate.}
    OPTIONAL {?release_BN xyz:asin ?asin.}
    OPTIONAL {?release_BN xyz:barcode ?barcode.}
    OPTIONAL {
      ?release_BN xyz:artist-credit/fx:anySlot/xyz:artist ?artist_BN.
      ?artist_BN xyz:id ?creditedArtistMbID.
      
      OPTIONAL {?artist_BN xyz:name ?artistName.}

      {?artist_BN xyz:type "Person". BIND(:ArtistPerson as ?artistClass).}
      UNION
      {?artist_BN xyz:type "Group". BIND(:Band as ?artistClass).}
      UNION
      {?artist_BN xyz:type "Choir". BIND(:Choir as ?artistClass).}
      UNION
      {?artist_BN xyz:type "Orchestra". BIND(:Orchestra as ?artistClass).}
      UNION
      {?artist_BN xyz:type ?mbArtistType. FILTER(?mbArtistType NOT IN ("Person", "Group", "Choir", "Orchestra")). BIND(:ArtistGroup as ?artistClass).}

    }
    OPTIONAL {
      ?release_BN xyz:url-relation-list/fx:anySlot/xyz:target ?urlstr.
      BIND(fx:entity(?urlstr) as ?url).
    }

    BIND(fx:entity(res:Release, "/", ?mbID) as ?releaseMyNS).
    BIND(fx:entity(res:Artist, "/", ?creditedArtistMbID) as ?creditedArtistMyNS).

    BIND(fx:entity("https://musicbrainz.org/release/", ?mbID) as ?mbURL).
    BIND(fx:entity("https://musicbrainz.org/artist/", ?creditedArtistMbID) as ?mbArtistURL).
    BIND(fx:entity("https://www.amazon.com/dp/", ?asin) as ?asinURL).
  }
}
